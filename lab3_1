#include<iostream>
#include<glut.h>
#include<cmath>
using namespace std;
float triangle[3][3] = { {200,300,400},{100,300,100},{1,1,1} };
float result[3][3] = { {0,0,0},{0,0,0},{0,0,0} };


void drawtriangle() {
	glBegin(GL_TRIANGLES);
	glVertex2f(triangle[0][0], triangle[1][0]);
	glVertex2f(triangle[0][1], triangle[1][1]);
	glVertex2f(triangle[0][2], triangle[1][2]);
	glEnd();
	glFlush();
}

void rotateOrigin() {
	double q, deg;
	int i, j, k;
	cout << "ENter angle of rotation";
	cin >> q;
	deg = q * (3.14159 / 180);

	double a[3][3] = { {cos(deg), -sin(deg),  0},
					 { sin(deg), cos(deg) ,  0},
					 {0    , 0      ,  1} };

	for (i = 0; i < 3; i++) {
		for (j = 0; j < 3; j++) {
			result[i][j] = 0;
			for (k = 0; k < 3; k++) {
				result[i][j] += a[i][k] * triangle[k][j];
			}
		}
	}
}

void drawFinal() {
	glBegin(GL_TRIANGLES);
	glVertex2f(result[0][0], result[1][0]);
	glVertex2f(result[0][1], result[1][1]);
	glVertex2f(result[0][2], result[1][2]);
	glEnd();
}

void rotateCenter() {
	double q, sum, deg, x, y;
	int i, j, k;
	cout << "ENter angle of rotation";
	cin >> q;
	deg = q * (3.14159 / 180);
	//finding the centroid
	x = static_cast<double>((200 + 300 + 400)) / 3;
	y = static_cast<double>((100 + 300 + 100)) / 3;

	double b[3][3] = { {cos(deg), -sin(deg),  (x * (1 - cos(deg))) + (y * sin(deg))},
					 {sin(deg), cos(deg)  ,  (y * (1 - cos(deg))) - (x * sin(deg))},
					 { 0    , 0           ,      1 } };

	for (i = 0; i < 3; i++) {
		for (j = 0; j < 3; j++) {
			sum = 0;
			for (k = 0; k < 3; k++) {
				sum += b[i][k] * triangle[k][j];
			}
			result[i][j] = sum;
		}
	}

}


void display() {
	drawtriangle();
	rotateOrigin();
	drawFinal();
	rotateCenter();
	drawFinal();
	glFlush();
}


void init() {
	glClearColor(0, 0, 0, 0);
	glColor3f(1.0, 0.0, 0.0);
	gluOrtho2D(0, 800, 0, 800);
	glClear(GL_COLOR_BUFFER_BIT);
}


int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(800, 800);
	glutCreateWindow("Transformations");
	init();
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}
